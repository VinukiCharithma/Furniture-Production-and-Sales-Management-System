{"ast":null,"code":"var _jsxFileName = \"E:\\\\SLIT\\\\Y2S2\\\\ITProject\\\\frontend\\\\src\\\\Pages\\\\AdminOrderDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../Context/AuthContext';\nimport api from '../utils/api';\nimport './AdminOrderDetails.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminOrderDetails = () => {\n  _s();\n  const {\n    orderId\n  } = useParams();\n  const {\n    isAdmin\n  } = useAuth();\n  const navigate = useNavigate();\n  const [order, setOrder] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n  const [isUpdating, setIsUpdating] = useState(false);\n  useEffect(() => {\n    // First check if orderId exists and is valid\n    if (!orderId || !orderId.match(/^[0-9a-fA-F]{24}$/)) {\n      setError('Invalid order ID');\n      setLoading(false);\n      return;\n    }\n    if (!isAdmin) {\n      navigate('/');\n      return;\n    }\n    const fetchOrder = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await api.get(`/orders/admin/${orderId}`);\n        if (!response.data || !response.data.order) {\n          throw new Error('Order not found');\n        }\n        setOrder(response.data.order);\n        setStatus(response.data.order.status);\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Fetch order error:', err);\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Failed to load order details');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchOrder();\n  }, [orderId, isAdmin, navigate]);\n  const handleStatusUpdate = async () => {\n    if (!orderId || !status) return;\n    try {\n      setIsUpdating(true);\n      const response = await api.put(`/orders/admin/${orderId}/update-status`, {\n        status\n      });\n      if (response.data && response.data.order) {\n        setOrder(response.data.order);\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Update error:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || 'Failed to update order status');\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n  const getStatusBadge = status => {\n    const statusClasses = {\n      processing: 'badge-processing',\n      shipped: 'badge-shipped',\n      delivered: 'badge-delivered',\n      cancelled: 'badge-cancelled'\n    };\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `status-badge ${statusClasses[status] || 'badge-default'}`,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  };\n  const formatDate = dateString => {\n    if (!dateString) return 'N/A';\n    const options = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading order details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => navigate('/admin/orders'),\n      children: \"\\u2190 Back to Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-order-details\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => navigate('/admin/orders'),\n      children: \"\\u2190 Back to Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminOrderDetails, \"yJDCKI2DQb4k1D1ghAfQLS6GoZc=\", false, function () {\n  return [useParams, useAuth, useNavigate];\n});\n_c = AdminOrderDetails;\nexport default AdminOrderDetails;\nvar _c;\n$RefreshReg$(_c, \"AdminOrderDetails\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useAuth","api","jsxDEV","_jsxDEV","AdminOrderDetails","_s","orderId","isAdmin","navigate","order","setOrder","loading","setLoading","error","setError","status","setStatus","isUpdating","setIsUpdating","match","fetchOrder","response","get","data","Error","err","_err$response","_err$response$data","console","message","handleStatusUpdate","put","_err$response2","_err$response2$data","getStatusBadge","statusClasses","processing","shipped","delivered","cancelled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString","undefined","onClick","_c","$RefreshReg$"],"sources":["E:/SLIT/Y2S2/ITProject/frontend/src/Pages/AdminOrderDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../Context/AuthContext';\r\nimport api from '../utils/api';\r\nimport './AdminOrderDetails.css';\r\n\r\nconst AdminOrderDetails = () => {\r\n  const { orderId } = useParams();\r\n  const { isAdmin } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [order, setOrder] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // First check if orderId exists and is valid\r\n    if (!orderId || !orderId.match(/^[0-9a-fA-F]{24}$/)) {\r\n      setError('Invalid order ID');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (!isAdmin) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n\r\n    const fetchOrder = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const response = await api.get(`/orders/admin/${orderId}`);\r\n        \r\n        if (!response.data || !response.data.order) {\r\n          throw new Error('Order not found');\r\n        }\r\n        \r\n        setOrder(response.data.order);\r\n        setStatus(response.data.order.status);\r\n      } catch (err) {\r\n        console.error('Fetch order error:', err);\r\n        setError(err.response?.data?.message || err.message || 'Failed to load order details');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOrder();\r\n  }, [orderId, isAdmin, navigate]);\r\n\r\n  const handleStatusUpdate = async () => {\r\n    if (!orderId || !status) return;\r\n    \r\n    try {\r\n      setIsUpdating(true);\r\n      const response = await api.put(`/orders/admin/${orderId}/update-status`, {\r\n        status\r\n      });\r\n      \r\n      if (response.data && response.data.order) {\r\n        setOrder(response.data.order);\r\n      }\r\n    } catch (err) {\r\n      console.error('Update error:', err);\r\n      setError(err.response?.data?.message || err.message || 'Failed to update order status');\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status) => {\r\n    const statusClasses = {\r\n      processing: 'badge-processing',\r\n      shipped: 'badge-shipped',\r\n      delivered: 'badge-delivered',\r\n      cancelled: 'badge-cancelled'\r\n    };\r\n    \r\n    return (\r\n      <span className={`status-badge ${statusClasses[status] || 'badge-default'}`}>\r\n        {status}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return 'N/A';\r\n    const options = { \r\n      year: 'numeric', \r\n      month: 'short', \r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  if (loading) return <div className=\"loading\">Loading order details...</div>;\r\n  if (error) return (\r\n    <div className=\"error-container\">\r\n      <div className=\"error\">{error}</div>\r\n      <button className=\"back-button\" onClick={() => navigate('/admin/orders')}>\r\n        &larr; Back to Orders\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"admin-order-details\">\r\n      <button className=\"back-button\" onClick={() => navigate('/admin/orders')}>\r\n        &larr; Back to Orders\r\n      </button>\r\n\r\n      {/* Rest of your JSX remains the same */}\r\n      {/* ... */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminOrderDetails;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}