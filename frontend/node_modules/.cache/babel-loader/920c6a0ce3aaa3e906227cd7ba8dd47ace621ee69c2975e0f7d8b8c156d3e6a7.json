{"ast":null,"code":"export const getProductImageUrl = imagePath => {\n  // Default placeholder path (make sure this exists in your public folder)\n  const placeholder = '/images/products/placeholder-product.jpg';\n  if (!imagePath) return placeholder;\n\n  // If it's already a full URL or data URL, return as-is\n  if (imagePath.startsWith('http') || imagePath.startsWith('data:')) {\n    return imagePath;\n  }\n\n  // Remove any leading slashes to prevent double slashes in URL\n  const cleanPath = imagePath.replace(/^\\/+/, '');\n\n  // Check if the path already includes the products directory\n  if (cleanPath.includes('images/products/')) {\n    return `http://localhost:5000/${cleanPath}`;\n  }\n\n  // Default case - prepend the base path\n  return `http://localhost:5000/images/products/${cleanPath}`;\n};\nexport const handleImageError = e => {\n  console.error('Image failed to load:', e.target.src);\n\n  // Only replace with placeholder if it's not already the placeholder\n  if (!e.target.src.includes('placeholder-product.jpg')) {\n    e.target.src = '/images/products/placeholder-product.jpg';\n    e.target.style.objectFit = 'contain';\n  }\n\n  // Prevent infinite loop by removing the error handler after first failure\n  e.target.onerror = null;\n};","map":{"version":3,"names":["getProductImageUrl","imagePath","placeholder","startsWith","cleanPath","replace","includes","handleImageError","e","console","error","target","src","style","objectFit","onerror"],"sources":["E:/SLIT/Y2S2/ITProject/frontend/src/utils/imageUtils.js"],"sourcesContent":["export const getProductImageUrl = (imagePath) => {\r\n  // Default placeholder path (make sure this exists in your public folder)\r\n  const placeholder = '/images/products/placeholder-product.jpg';\r\n  \r\n  if (!imagePath) return placeholder;\r\n  \r\n  // If it's already a full URL or data URL, return as-is\r\n  if (imagePath.startsWith('http') || imagePath.startsWith('data:')) {\r\n    return imagePath;\r\n  }\r\n  \r\n  // Remove any leading slashes to prevent double slashes in URL\r\n  const cleanPath = imagePath.replace(/^\\/+/, '');\r\n  \r\n  // Check if the path already includes the products directory\r\n  if (cleanPath.includes('images/products/')) {\r\n    return `http://localhost:5000/${cleanPath}`;\r\n  }\r\n  \r\n  // Default case - prepend the base path\r\n  return `http://localhost:5000/images/products/${cleanPath}`;\r\n};\r\n\r\nexport const handleImageError = (e) => {\r\n  console.error('Image failed to load:', e.target.src);\r\n  \r\n  // Only replace with placeholder if it's not already the placeholder\r\n  if (!e.target.src.includes('placeholder-product.jpg')) {\r\n    e.target.src = '/images/products/placeholder-product.jpg';\r\n    e.target.style.objectFit = 'contain';\r\n  }\r\n  \r\n  // Prevent infinite loop by removing the error handler after first failure\r\n  e.target.onerror = null;\r\n};"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAIC,SAAS,IAAK;EAC/C;EACA,MAAMC,WAAW,GAAG,0CAA0C;EAE9D,IAAI,CAACD,SAAS,EAAE,OAAOC,WAAW;;EAElC;EACA,IAAID,SAAS,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIF,SAAS,CAACE,UAAU,CAAC,OAAO,CAAC,EAAE;IACjE,OAAOF,SAAS;EAClB;;EAEA;EACA,MAAMG,SAAS,GAAGH,SAAS,CAACI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;EAE/C;EACA,IAAID,SAAS,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC1C,OAAO,yBAAyBF,SAAS,EAAE;EAC7C;;EAEA;EACA,OAAO,yCAAyCA,SAAS,EAAE;AAC7D,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIC,CAAC,IAAK;EACrCC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAACG,MAAM,CAACC,GAAG,CAAC;;EAEpD;EACA,IAAI,CAACJ,CAAC,CAACG,MAAM,CAACC,GAAG,CAACN,QAAQ,CAAC,yBAAyB,CAAC,EAAE;IACrDE,CAAC,CAACG,MAAM,CAACC,GAAG,GAAG,0CAA0C;IACzDJ,CAAC,CAACG,MAAM,CAACE,KAAK,CAACC,SAAS,GAAG,SAAS;EACtC;;EAEA;EACAN,CAAC,CAACG,MAAM,CAACI,OAAO,GAAG,IAAI;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}