{"ast":null,"code":"var _jsxFileName = \"E:\\\\SLIT\\\\Y2S2\\\\ITProject\\\\frontend\\\\src\\\\Context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || null);\n  const navigate = useNavigate();\n\n  // Initialize user data from localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    const storedToken = localStorage.getItem(\"token\");\n    if (storedUser && storedToken) {\n      setUser(JSON.parse(storedUser));\n      setToken(storedToken);\n    }\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      const response = await api.post(\"/auth/login\", {\n        email,\n        password\n      });\n\n      // Save token and user data\n      setToken(response.data.token);\n      setUser(response.data.user);\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n\n      // Redirect based on role\n      if (response.data.user.role === \"Admin\") {\n        navigate(\"/admin-dashboard\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n      return response.data;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n\n  // Logout function - wrapped in useCallback\n  const logout = useCallback(() => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/\");\n  }, [navigate]);\n\n  // Check authentication status\n  const isAuthenticated = !!token;\n\n  // Check admin status\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === \"Admin\";\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      isAuthenticated,\n      isAdmin,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5gmpk6zrsijjWqMTchcQ6A4D+18=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useNavigate","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","navigate","storedUser","storedToken","JSON","parse","login","email","password","response","post","data","setItem","stringify","role","error","console","logout","removeItem","isAuthenticated","isAdmin","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["E:/SLIT/Y2S2/ITProject/frontend/src/Context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../utils/api\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\") || null);\r\n  const navigate = useNavigate();\r\n\r\n  // Initialize user data from localStorage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"user\");\r\n    const storedToken = localStorage.getItem(\"token\");\r\n    \r\n    if (storedUser && storedToken) {\r\n      setUser(JSON.parse(storedUser));\r\n      setToken(storedToken);\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await api.post(\"/auth/login\", { email, password });\r\n      \r\n      // Save token and user data\r\n      setToken(response.data.token);\r\n      setUser(response.data.user);\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n      \r\n      // Redirect based on role\r\n      if (response.data.user.role === \"Admin\") {\r\n        navigate(\"/admin-dashboard\");\r\n      } else {\r\n        navigate(\"/dashboard\");\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout function - wrapped in useCallback\r\n  const logout = useCallback(() => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    navigate(\"/\");\r\n  }, [navigate]);\r\n\r\n  // Check authentication status\r\n  const isAuthenticated = !!token;\r\n  \r\n  // Check admin status\r\n  const isAdmin = user?.role === \"Admin\";\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        isAuthenticated,\r\n        isAdmin,\r\n        login,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => React.useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}