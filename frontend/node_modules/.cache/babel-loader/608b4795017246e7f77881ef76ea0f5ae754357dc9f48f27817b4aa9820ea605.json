{"ast":null,"code":"export const getProductImageUrl = imagePath => {\n  // Default placeholder path (relative to public folder)\n  const placeholder = '/images/placeholder-product.jpg';\n  if (!imagePath) return placeholder;\n\n  // If it's already a full URL or data URL, return as-is\n  if (imagePath.startsWith('http') || imagePath.startsWith('data:')) {\n    return imagePath;\n  }\n\n  // Remove any leading slashes to prevent double slashes in URL\n  const cleanPath = imagePath.replace(/^\\/+/, '');\n\n  // Check if the path already includes the products directory\n  if (cleanPath.includes('images/products/')) {\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/${cleanPath}`;\n  }\n\n  // Default case - prepend the base path\n  return `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/images/products/${cleanPath}`;\n};\nexport const handleImageError = e => {\n  const placeholder = '/images/placeholder-product.jpg';\n\n  // If we're already trying to load the placeholder, do nothing\n  if (e.target.src.endsWith(placeholder)) {\n    console.warn('Placeholder image also failed to load');\n    e.target.onerror = null;\n    return;\n  }\n  console.error('Image failed to load:', e.target.src);\n  e.target.src = placeholder;\n  e.target.style.objectFit = 'contain';\n\n  // Remove the error handler to prevent loops\n  e.target.onerror = null;\n};","map":{"version":3,"names":["getProductImageUrl","imagePath","placeholder","startsWith","cleanPath","replace","includes","process","env","REACT_APP_API_URL","handleImageError","e","target","src","endsWith","console","warn","onerror","error","style","objectFit"],"sources":["E:/SLIT/Y2S2/ITProject/frontend/src/utils/imageUtils.js"],"sourcesContent":["export const getProductImageUrl = (imagePath) => {\r\n  // Default placeholder path (relative to public folder)\r\n  const placeholder = '/images/placeholder-product.jpg';\r\n  \r\n  if (!imagePath) return placeholder;\r\n  \r\n  // If it's already a full URL or data URL, return as-is\r\n  if (imagePath.startsWith('http') || imagePath.startsWith('data:')) {\r\n    return imagePath;\r\n  }\r\n  \r\n  // Remove any leading slashes to prevent double slashes in URL\r\n  const cleanPath = imagePath.replace(/^\\/+/, '');\r\n  \r\n  // Check if the path already includes the products directory\r\n  if (cleanPath.includes('images/products/')) {\r\n    return `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/${cleanPath}`;\r\n  }\r\n  \r\n  // Default case - prepend the base path\r\n  return `${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/images/products/${cleanPath}`;\r\n};\r\n\r\nexport const handleImageError = (e) => {\r\n  const placeholder = '/images/placeholder-product.jpg';\r\n  \r\n  // If we're already trying to load the placeholder, do nothing\r\n  if (e.target.src.endsWith(placeholder)) {\r\n    console.warn('Placeholder image also failed to load');\r\n    e.target.onerror = null;\r\n    return;\r\n  }\r\n  \r\n  console.error('Image failed to load:', e.target.src);\r\n  e.target.src = placeholder;\r\n  e.target.style.objectFit = 'contain';\r\n  \r\n  // Remove the error handler to prevent loops\r\n  e.target.onerror = null;\r\n};"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAIC,SAAS,IAAK;EAC/C;EACA,MAAMC,WAAW,GAAG,iCAAiC;EAErD,IAAI,CAACD,SAAS,EAAE,OAAOC,WAAW;;EAElC;EACA,IAAID,SAAS,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIF,SAAS,CAACE,UAAU,CAAC,OAAO,CAAC,EAAE;IACjE,OAAOF,SAAS;EAClB;;EAEA;EACA,MAAMG,SAAS,GAAGH,SAAS,CAACI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;EAE/C;EACA,IAAID,SAAS,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC1C,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,IAAIL,SAAS,EAAE;EACnF;;EAEA;EACA,OAAO,GAAGG,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,oBAAoBL,SAAS,EAAE;AACnG,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAIC,CAAC,IAAK;EACrC,MAAMT,WAAW,GAAG,iCAAiC;;EAErD;EACA,IAAIS,CAAC,CAACC,MAAM,CAACC,GAAG,CAACC,QAAQ,CAACZ,WAAW,CAAC,EAAE;IACtCa,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC;IACrDL,CAAC,CAACC,MAAM,CAACK,OAAO,GAAG,IAAI;IACvB;EACF;EAEAF,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEP,CAAC,CAACC,MAAM,CAACC,GAAG,CAAC;EACpDF,CAAC,CAACC,MAAM,CAACC,GAAG,GAAGX,WAAW;EAC1BS,CAAC,CAACC,MAAM,CAACO,KAAK,CAACC,SAAS,GAAG,SAAS;;EAEpC;EACAT,CAAC,CAACC,MAAM,CAACK,OAAO,GAAG,IAAI;AACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}