{"ast":null,"code":"import api from '../utils/api';\n\n// Get all users (admin only)\nexport const getAllUsers = async () => {\n  try {\n    const response = await api.get('/users');\n    return response.data.users;\n  } catch (error) {\n    var _error$response, _error$response2;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      throw new Error('Session expired. Please log in again.');\n    } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n      throw new Error('Admin privileges required');\n    }\n    throw new Error('Failed to fetch users');\n  }\n};\n\n// Add a new user (admin only)\nexport const addUser = async userData => {\n  try {\n    const response = await api.post('/users', userData);\n    return response.data.user;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n      throw new Error('Session expired. Please log in again.');\n    } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 403) {\n      throw new Error('Admin privileges required');\n    }\n    throw new Error('Failed to add user');\n  }\n};\n\n// Get user by ID\nexport const getUserById = async id => {\n  try {\n    const response = await api.get(`/users/${id}`);\n    return response.data.user;\n  } catch (error) {\n    var _error$response5, _error$response6;\n    if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 401) {\n      throw new Error('Session expired. Please log in again.');\n    } else if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 403) {\n      throw new Error('Unauthorized access');\n    }\n    throw new Error('Failed to fetch user');\n  }\n};\n\n// Update user\nexport const updateUser = async (id, userData) => {\n  try {\n    const response = await api.put(`/users/${id}`, userData);\n    return response.data.user;\n  } catch (error) {\n    var _error$response7, _error$response8;\n    if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 401) {\n      throw new Error('Session expired. Please log in again.');\n    } else if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 403) {\n      throw new Error('Unauthorized access');\n    }\n    throw new Error('Failed to update user');\n  }\n};\n\n// Delete user (admin only)\nexport const deleteUser = async id => {\n  try {\n    const response = await api.delete(`/users/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response9, _error$response10;\n    if (((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) === 401) {\n      throw new Error('Session expired. Please log in again.');\n    } else if (((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status) === 403) {\n      throw new Error('Admin privileges required');\n    }\n    throw new Error('Failed to delete user');\n  }\n};","map":{"version":3,"names":["api","getAllUsers","response","get","data","users","error","_error$response","_error$response2","status","Error","addUser","userData","post","user","_error$response3","_error$response4","getUserById","id","_error$response5","_error$response6","updateUser","put","_error$response7","_error$response8","deleteUser","delete","_error$response9","_error$response10"],"sources":["E:/SLIT/Y2S2/ITProject/frontend/src/Services/userService.js"],"sourcesContent":["import api from '../utils/api';\r\n\r\n// Get all users (admin only)\r\nexport const getAllUsers = async () => {\r\n  try {\r\n    const response = await api.get('/users');\r\n    return response.data.users;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('Session expired. Please log in again.');\r\n    } else if (error.response?.status === 403) {\r\n      throw new Error('Admin privileges required');\r\n    }\r\n    throw new Error('Failed to fetch users');\r\n  }\r\n};\r\n\r\n// Add a new user (admin only)\r\nexport const addUser = async (userData) => {\r\n  try {\r\n    const response = await api.post('/users', userData);\r\n    return response.data.user;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('Session expired. Please log in again.');\r\n    } else if (error.response?.status === 403) {\r\n      throw new Error('Admin privileges required');\r\n    }\r\n    throw new Error('Failed to add user');\r\n  }\r\n};\r\n\r\n// Get user by ID\r\nexport const getUserById = async (id) => {\r\n  try {\r\n    const response = await api.get(`/users/${id}`);\r\n    return response.data.user;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('Session expired. Please log in again.');\r\n    } else if (error.response?.status === 403) {\r\n      throw new Error('Unauthorized access');\r\n    }\r\n    throw new Error('Failed to fetch user');\r\n  }\r\n};\r\n\r\n// Update user\r\nexport const updateUser = async (id, userData) => {\r\n  try {\r\n    const response = await api.put(`/users/${id}`, userData);\r\n    return response.data.user;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('Session expired. Please log in again.');\r\n    } else if (error.response?.status === 403) {\r\n      throw new Error('Unauthorized access');\r\n    }\r\n    throw new Error('Failed to update user');\r\n  }\r\n};\r\n\r\n// Delete user (admin only)\r\nexport const deleteUser = async (id) => {\r\n  try {\r\n    const response = await api.delete(`/users/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      throw new Error('Session expired. Please log in again.');\r\n    } else if (error.response?.status === 403) {\r\n      throw new Error('Admin privileges required');\r\n    }\r\n    throw new Error('Failed to delete user');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}